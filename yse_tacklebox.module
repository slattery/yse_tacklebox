<?php

/**
 * @file
 * Examples demonstrating how to implement and invoke hooks.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function yse_tacklebox_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name == 'help.page.yse_tacklebox') {
    $text = file_get_contents(__DIR__ . '/README.md');
    if (!Drupal::moduleHandler()->moduleExists('markdown')) {
      return '<pre>' . $text . '</pre>';
    }
    else {
      /** @var \Drupal\markdown\PluginManager\ParserManagerInterface $parser_manager */
      $parser_manager = \Drupal::service('plugin.manager.markdown.parser');
      $parser = $parser_manager->getDefaultParser([
        'render_strategy' => ['type' => 'none'],
      ]);
      return $parser->parse($text);
    }
  }
  return NULL;
}


/**
 * Implements hook_entity_form_mode_alter().
 *
 * We want to isolate large groups of fields for the editor to make profile editing easier
 * We have form modes defined for entities that need them but without explicit hooks we cannot
 * present them as normal edit links.   We could pull in a huge inline form where we specify
 * the form mode, like we do with TICL paragraphs, but then you need a route and a menu and
 * training to avoid the edit button!  So instead we try to steer the appropriate form to the
 * editor in the normal edit context.
 * Notes:
 *   0. assume that permissions are being handled normally for read write
 *    a. this means not checking for netid on entities if we confer ownership already
 *   1. check for bundle to see if we need to act
 *   2. check for conditions that governs the mode to use
 *    a. on entity
 *    b. with currentuser
 *    c. environmental, etc.
 *
 * @see hook_entity_form_mode_alter()
 */
function yse_tacklebox_entity_form_mode_alter(&$form_mode, EntityInterface $entity) {

    $account = \Drupal::currentUser();
    $user_roles = $account->getRoles();
    $is_admin   = in_array('administrator', $user_roles) ? true : false;
    $is_student = in_array('student', $user_roles) ? true : false;
    $is_staff   = in_array('staff',   $user_roles) ? true : false;
    $is_faculty = in_array('faculty', $user_roles) ? true : false;
    $is_manager = in_array('profile_manager', $user_roles) ? true : false;

  if ($entity->bundle() == 'yse_detail_profile') {
  // Here we check the profile type rather than user role since a staffer might edit a faculty profile, etc.
    $form_view_clue = $entity->get('field_primary_restype_taxref')->referencedEntities()[0]->label();
    $form_view_more  = $entity->get('field_student_degree_type_taxref');

    // PhDs have been relegated back the student status.
    // if ($form_view_more){
    //  if ($entity->get('field_student_degree_type_taxref')->referencedEntities()){
    //    $mod = $entity->get('field_student_degree_type_taxref')->referencedEntities()[0]->label();
    //    if ($mod and $mod == 'PhD'){
    //      $form_view_clue = 'student';
    //    }
    //  }
    //}

    if (strtolower($form_view_clue) == 'postdoc'){
       $form_view_clue = 'staff';
    }

    $form_view_name = 'form_' . strtolower($form_view_clue);

    if ($is_admin){
      if (in_array('profile_manager', $user_roles)) {
      // let admins see what users see by toggling the 'profile_manager' role.
        \Drupal::messenger()->addWarning('You are using the profile_manager view mode profile form.  You can instead see the Default with all fields by by removing "Profile Manager" from your user roles.');
        $form_mode = 'form_manager';
      } else {
        \Drupal::messenger()->addMessage('You are using the Default profile form.  You can instead see the profile_manager view mode by adding "Profile Manager" to your user roles.');
        // let the Default load
      }
    } elseif ($is_manager){
        $form_mode = 'form_manager';
    } else {
        $form_mode = $form_view_name;
    }
  }  elseif ($entity instanceof \Drupal\user\UserInterface) {
  // Here we check the user role for the form mode
    if (!$is_admin){
      if (in_array('profile_manager', $user_roles)) {
        $form_mode = 'form_manager';
      } elseif ($is_student){
        $form_mode = 'form_student';
      } elseif ($is_faculty){
        $form_mode = 'form_faculty';
      } else {
        $form_mode = 'form_staff';
      }
    }
  }
}


function yse_tacklebox_node_presave(EntityInterface $node) {

  $root_level_roles = ['faculty','student','staff'];
  $aux_roles = ['staff' => ['profile_manager','content_manager','faculty_support']];

  if ($node->bundle() == 'yse_detail_profile'){
    // Avoid a round-robin with new profile stubs.
    if (!$node->isNew()) {
      $netid = $node->get('field_yse_netid')->getString();
      $new_primary = $node->get('field_primary_restype_taxref')->referencedEntities()[0]->getName();
      $old_primary = $node->original->get('field_primary_restype_taxref')->referencedEntities()[0]->getName();

      if (!empty($netid) && !empty($new_primary) && !empty($old_primary) && ($new_primary !== $old_primary)){
        $netid = strtolower($netid);
        $newtype = strtolower($new_primary);
        $oldtype = strtolower($old_primary);

        if (($oldtype === 'postdoc' && $newtype === 'staff') || ($oldtype === 'staff' && $newtype === 'postdoc')){
          //swapping to/from postdoc is treated as a cosmetic change
          //no-op in terms of user roles
          return \Drupal::service('messenger')->addMessage('Swapping to/from Staff and Postdoc, roles left intact for ' . $node->label());
        } else {
          $uid = \Drupal::service('cas.user_manager')->getUidForCasUsername($netid);
          if (empty($uid)){
            return \Drupal::service('messenger')->addMessage('NetID ' . $netid . ' did not resolve to a user record, no role assignment for ' . $node->label());
          } else {
            $user = \Drupal\user\Entity\User::load($uid);
            //Make sure we don't have any more than one root level role
            foreach ($root_level_roles as $removal){
              $user->removeRole($removal);
            }
            if (!empty($aux_roles[$oldtype])){
              foreach ($aux_roles[$oldtype] as $aux_rm){
                $user->removeRole($aux_rm);
              }
            }
            $newrole = $newtype == 'postdoc' ? 'staff' : $newtype;
            $newname = $newtype == 'postdoc' ? 'Staff' : $new_primary;

            if (in_array($newrole, $root_level_roles)) {
              $user->addRole($newrole);
              \Drupal::service('messenger')->addMessage('Role ' . $newname . ' assigned to user record for ' . $node->label());
            }
            $user->save();
          }
        }
      }
    }
  }
}
